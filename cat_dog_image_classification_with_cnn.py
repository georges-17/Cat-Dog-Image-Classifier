# -*- coding: utf-8 -*-
"""cat/dog image classification with CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ptZ3Edbncb_VRuvtGP8wCOTTCzX4FC25
"""

import numpy as np
import matplotlib.pyplot as plt
import random
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from tensorflow.keras.metrics import Accuracy

"""# Load Dataset

"""

import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Create a folder in the root directory
!mkdir -p "/content/drive/My Drive/Cat Dog image dataset"

# prompt: import os from google.colab import drive  # Mount Google Drive drive.mount('/content/drive')  # Create a folder in the root directory !mkdir -p "/content/drive/My Drive/Cat Dog image dataset"  i wrote this code to mount my drive but i want to access the files in it how?

# Access the files in your Google Drive
# Replace 'your_file.txt' with the actual file name you want to access
with open('/content/drive/My Drive/Cat Dog image dataset/input.csv', 'r') as f:
  # Read the contents of the file
  contents = f.read()
  # Process the contents as needed
  # ...

with open('/content/drive/My Drive/Cat Dog image dataset/input_test.csv', 'r') as f:
  # Read the contents of the file
  contents = f.read()

X_train = np.loadtxt('/content/drive/My Drive/Cat Dog image dataset/input.csv', delimiter =',')
Y_train = np.loadtxt('/content/drive/My Drive/Cat Dog image dataset/labels.csv', delimiter =',')

X_test = np.loadtxt('/content/drive/My Drive/Cat Dog image dataset/input_test.csv', delimiter =',')
Y_test = np.loadtxt('/content/drive/My Drive/Cat Dog image dataset/labels_test.csv', delimiter = ',')

X_train = X_train.reshape(len(X_train), 100, 100,3)
Y_train = Y_train.reshape(len(Y_train), 1)

X_test = X_test.reshape(len(X_test), 100, 100,3)
Y_test = Y_test.reshape(len(Y_test), 1)

print('Shape of X_train: ', X_train.shape)
print('Shape of Y_train: ', Y_train.shape)
print('Shape of X_test: ', X_test.shape)
print('Shape of Y_test: ', Y_test.shape)

#we need to divide all the values by 255.0
X_train = X_train/255.0
X_test = X_test/255.0

X_train[1,:]

idx = random.randint(0,len(X_train))
plt.imshow(X_train[idx, :])
plt.show()

"""# Model"""

model = Sequential([

    Conv2D(32 , (3,3), activation = 'relu', input_shape = (100,100,3)),#32 is the number of filters , and (3,3) is the size so 3X3
    MaxPooling2D((2,2)), # the size of the filter to maxPool 2X2

    Conv2D(32 , (3,3), activation = 'relu'), #we don't have to mention the input shape because it is for the first layer only
    MaxPooling2D((2,2)),

    Flatten(),
    Dense(64, activation ='relu'),
    Dense(1, activation = 'sigmoid') # output/final layer should have the same amount of outputs, in our case a binary classification it is sufficient to have 1 neuron, and we use sigmoid because the output should be between 0 and 1
])

model.compile(loss= 'binary_crossentropy',
              optimizer='Adam' ,
              metrics = ['accuracy'])

model.fit(X_train, Y_train, epochs = 5, batch_size=64)

model.evaluate(X_test,Y_test)

idx2 = random.randint(0, len(Y_test))
plt.imshow(X_test[idx2, :])
plt.show()

y_pred = model.predict(X_test[idx2, :].reshape(1, 100, 100, 3))
#y_pred = y_pred > 0.5

if(y_pred >= 0.500):
    pred = 'cat'
else:
    pred = 'dog'

print("Our model says it is a :", pred)